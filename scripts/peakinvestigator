#!/usr/bin/env python3

import sys, os
import os.path
import posixpath
import sqlite3
import math
import gzip

import numpy

from peakinvestigator import *
from peakinvestigator.actions import *

class FileInfo(object):
	
	def __init__(self, filename):
		self.filename = filename
		if self.compressed:
			self.open = gzip.open
		else:
			self.open = open

	@property
	def compressed(self):
		with open(self.filename, "rb") as file:
			magic = file.read(2)
		
		return magic.hex() == "1f8b"
		
	@property
	def archive(self):
		with self.open(self.filename, "rb") as file:
			file.seek(257)
			chars = file.read(5)
		
		return chars == b"ustar"


class PeakInvestigator(object):
	VERSION = "5.4"
	MODES = ["submit", "list", "fetch", "fetch_all", "delete"]

	_service = PeakInvestigatorSaaS()

	def __init__(self, args):
		self._args = args
		
		
		mode_args = [ getattr(args, x) for x in self.MODES ]
		
		self._modes = [ x for x, y in zip(self.MODES, mode_args) if y is True ]
		self._username = os.environ["USERNAME"]
		self._password = os.environ["PASSWORD"]
		self._project = os.environ["PROJECT"]
	
	def run(self):
		if len(self._modes) != 1:
			print("ERROR: Invalid number of modes specified.", file=sys.stderr)
			sys.exit(-1)
			
		print("Running", self._modes[0])
		if self._modes[0] == "submit":
			[ self._submit(x) for x in self._args.files ]
		if self._modes[0] == "fetch_all":
			db = self._open_database(self._args.database)
			[ self._fetch(x[0]) for x in self._get_jobs_from_db(db) ]
			[ self._delete(x[0]) for x in self._get_jobs_from_db(db) ]
		if self._modes[0] == "fetch":
			[ self._fetch(x) for x in self._args.files ]
			[ self._delete(x) for x in self._args.files ]
		if self._modes[0] == "delete":
			[ self._delete(x) for x in self._args.files ]
		if self._modes[0] == "list":
			self._list()

	def _execute(self, action):
		response = self._service.execute(action)
		action.process_response(response)

	def _list(self):
		db = self._open_database(self._args.database)
		jobs = self._get_jobs_from_db(db)
		
		for job in jobs:
			status_action = StatusAction(self.VERSION, self._username,
											self._password, job[0])
			self._execute(status_action)
			print("{job}\t{status}\t{file}".format(job=job[0],
													file=job[1],
													status=status_action.status))

	def _get_meta_data(self, filename):
		info = FileInfo(filename)
		if info.archive:
			import io, tarfile
			
			with tarfile.open(filename) as file:
				members = file.getmembers()
			
			if len([ x for x in members if x.name.startswith("./._") ]) > 0:
				print("Archive appears to have Mac-specific meta info. Exiting.")
				sys.exit(-3)

			members = [ x for x in members if not x.name.startswith("./._") ]
			offsets = [ x.offset_data for x in members ]
			sizes = [ x.size for x in members ]
			
			bytes = []
			with info.open(filename, "r") as file:
				for offset, size in zip(offsets, sizes):
					file.seek(offset)
					data = file.read(size)
					bytes.append(io.BytesIO(data))
					
			datas = [ numpy.loadtxt(x) for x in bytes ]
		else:
			datas = [ numpy.loadtxt(filename) ]

		counts = [ len(x) for x in datas ]
		good_datas = [ data for data, count in zip(datas, counts) if count > 0 ]
		min_mass = min([ data[0, 0] for data in good_datas ])
		max_mass = max([ data[-1, 0] for data in good_datas ])
		max_lines = max(counts)
		
		return len(good_datas), (math.floor(min_mass), math.ceil(max_mass), max_lines)

	def _init(self, filename):
		versions_action = PiVersionsAction(self.VERSION, self._username,
											self._password)
		self._execute(versions_action)
		if type(versions_action.error) is str:
			print("ERROR: {error}.".format(error=versions_action.error),
					file=stderr)
			sys.exit(-2)
		
		num_scans, meta_data = self._get_meta_data(filename)
		
		init_action = InitAction(self.VERSION, self._username, self._password,
								self._project, versions_action.current_version)
		init_action.with_scan_count(num_scans, 0).with_meta_data(*meta_data)
		
		self._execute(init_action)
		return init_action
		
	def _submit(self, filename):
		
		init_action = self._init(filename)

		if type(init_action.error) is str:
			print("ERROR: {error}.".format(error=init_action.error), file=sys.stderr)
			sys.exit(-2)
		
		if init_action.funds < max([ x["Cost"] for x in init_action.estimated_costs ]):
			print("ERROR: insufficient funds.", file=sys.stderr)
			sys.exit(-2);

		rto = sorted(init_action.response_time_objectives)[0]
		
		sftp_action = SftpAction(self.VERSION, self._username, self._password,
									self._project)
		self._execute(sftp_action)

		self._service.upload(sftp_action, filename,
						posixpath.join(sftp_action.directory, os.path.split(filename)[-1]))
		
		run_action = RunAction(self.VERSION, self._username, self._password,
								init_action.job, rto).with_files(filename)
								
		self._execute(run_action)
		
		if type(run_action.error) is str:
			print("ERROR: {error}.".format(error=run_action.error), file=sys.stderr)
			sys.exit(-2)
		
		print("Running job: ", run_action.job)

		db = self._open_database(self._args.database)
		self._save_into_db(db, run_action.job, filename)
	
	def _fetch(self, job):
		status = StatusAction(self.VERSION, self._username, self._password, job)
		
		self._execute(status)
		
		if not status.done:
			print("INFO: Job {job} is not done.".format(job=job))
			return
			
		print("INFO: Fetching results for job {}.".format(job))

		sftp = SftpAction(self.VERSION, self._username, self._password,
							self._project)
		self._execute(sftp)

		self._service.download(sftp, status.results_file,
							posixpath.split(status.results_file)[-1])
		self._service.download(sftp, status.log_file,
							posixpath.split(status.log_file)[-1])
		
	def _delete(self, job):
		service = PeakInvestigatorSaaS()
		delete = DeleteAction(self.VERSION, self._username, self._password, job)
		
		self._execute(delete)
		
		if delete.error is not None:
			print("ERROR: {}".format(delete.error), file=sys.stderr)
			return
		
		print("INFO: Deleted job {}.".format(job))
			
		db = self._open_database(self._args.database)
		self._delete_from_db(db, job)

		
	def _open_database(self, filename):
		 db = sqlite3.connect(filename)
		 cursor = db.cursor()
		 
		 cursor.execute("""CREATE TABLE IF NOT EXISTS Jobs
		 					( JobID TEXT UNIQUE NOT NULL, 
		 					Production TEXT NOT NULL, 
		 					Calibration TEXT DEFAULT NULL)""")
		 db.commit()
		 
		 return db
	
	def _save_into_db(self, db, job, filename):
		cursor = db.cursor()
		cursor.execute("""INSERT INTO Jobs (JobID, Production) VALUES
							(?, ?)""", (job, filename))
		db.commit()

	def _get_jobs_from_db(self, db):
		cursor = db.cursor()
		cursor.execute("""SELECT * FROM Jobs""")
		return cursor.fetchall()

	def _delete_from_db(self, db, job):
		cursor = db.cursor()
		cursor.execute("""DELETE FROM Jobs WHERE JobID = ?""", (job,))
		db.commit()

		
if __name__ == "__main__":
	from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
	from os.path import expanduser

	parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
	parser.add_argument("-s", "--submit", action="store_true",
							help="Submit one or more files for processing.")
	parser.add_argument("-l", "--list", action="store_true",
							help="List jobs saved to database.")
	parser.add_argument("-f", "--fetch", action="store_true",
							help="Fetch results for one or more jobs.")
	parser.add_argument("-fa", "--fetch-all", action="store_true",
							help="""Fetch all available results in database. 
									Jobs are deleted from server and database.""")
	parser.add_argument("-d", "--delete", action="store_true",
							help="Delete one or more jobs.")
	parser.add_argument("-db", "--database",
							help="File to record job information",
							default=expanduser("~/.peakinvestigator.db"))
	parser.add_argument("files", nargs="*",
							help="Files to submit or jobs to fetch.")
	
	args = parser.parse_args()

	app = PeakInvestigator(args)
	app.run()
	
	
 